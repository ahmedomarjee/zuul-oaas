<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

   
    <!--////////// OAuth 2.0 Server Configuration //////////-->
    
    <!-- Property files -->
    <context:property-placeholder location="classpath:auth-server.properties"/>
    
    <!--
        Authorziation server specifies that the OAuth2 authorization and token endpoints should
        be created in the application context.

        ! Change of endpoint URLs doesn't work in 1.0.0.RC2, we must use default ones !
    -->
    <oauth:authorization-server 
        authorization-endpoint-url="${authorization.endpoint}"
        token-endpoint-url="${token.endpoint}"
        client-details-service-ref="clientDetails"
        token-services-ref="tokenServices">

        <oauth:authorization-code/>
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password disabled="true" />
    </oauth:authorization-server>
    
    <!--  
        Base implementation for token services using random UUID values for the access token and refresh token
        values. The main extension point for customizations is the TokenEnhancer which will be called after the
        access and refresh tokens have been generated but before they are stored. Persistence is delegated to
        a TokenStore implementation and customization of the access token to a TokenEnhancer.
    -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices"
          p:supportRefreshToken="true"
          p:tokenStore-ref="tokenStore"
          p:clientDetailsService-ref="clientDetails" />

    <!--///// MongoDB storage for clients and tokens /////-->

    <beans profile="mongo">

        <bean id="clientDetails" class="cz.cvut.authserver.oauth2.services.MongoClientDetailsService">
            <constructor-arg ref="mongoTemplate" />
        </bean>

        <bean id="tokenStore" class="cz.cvut.authserver.oauth2.services.MongoTokenStore">
            <constructor-arg ref="mongoTemplate" />
        </bean>
    </beans>



    <!--///// SQL/JDBC storage for clients and tokens /////-->

    <beans profile="jdbc">

        <bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
            <constructor-arg ref="lazyDataSourceProxy" />
        </bean>

        <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
            <constructor-arg ref="lazyDataSourceProxy" />
        </bean>
    </beans>



    <!--/////  In-memory storage for clients and tokens /////-->

    <beans profile="inMemory">
        <!--
            Bean that provides the definition of the OAuth clients that are allowed to access this service
            (that can act on behalf of a user/resource owner).
        -->
        <oauth:client-details-service id="clientDetails">
            <oauth:client client-id="foodlovers"
                          secret="testsecret123"
                          authorized-grant-types="password,authorization_code,refresh_token,implicit"
                          scope="read,write"
                          authorities="ROLE_CLIENT" />

            <oauth:client client-id="tonr"
                          secret="secret"
                          authorized-grant-types="password,authorization_code,refresh_token,implicit"
                          scope="read,write"
                          authorities="ROLE_CLIENT" />
            <oauth:client client-id="my-client-with-registered-redirect" authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value" scope="read,trust" />
            <oauth:client client-id="apps-manager" secret="supersecret" authorized-grant-types="client_credentials"
			authorities="ROLE_CLIENT" scope="manager" />
            <oauth:client client-id="client-credentials-without-secret" authorized-grant-types="client_credentials"
			authorities="ROLE_CLIENT" scope="manager" />
            <oauth:client client-id="my-client-with-secret" authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"
			scope="read" secret="secret" />
        </oauth:client-details-service>

        <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />
    </beans>

</beans>
