<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

    <!--Property files--> 
    <context:property-placeholder location="classpath:auth-server.properties"/>
    
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <sec:http pattern="/oauth/api/v1/clients/**" create-session="stateless"
              entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true" authentication-manager-ref="emptyAuthenticationManager">
        <sec:intercept-url pattern="/oauth/api/v1/clients/**" access="hasRole('admin') and #oauth2.hasScope('tokens.write')"
                           method="PUT" />
        <sec:intercept-url pattern="/oauth/api/v1/clients/**" access="hasRole('admin') and #oauth2.hasScope('tokens.write')"
                           method="POST" />
        <sec:intercept-url pattern="/oauth/api/v1/clients/**"
                           access="hasRole('admin') and #oauth2.hasScope('tokens.write')" method="DELETE" />
        <sec:custom-filter ref="tokensResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>
    
    <authentication-manager id="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security" />
    
    <oauth:resource-server id="tokensResourceAuthenticationFilter" token-services-ref="tokenServices"
                           resource-id="tokens" entry-point-ref="oauthAuthenticationEntryPoint" />
          

    <!--Check token endpoint, providing token validation -->
                                                                         
    <sec:http pattern="/check_token" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
              authentication-manager-ref="clientAuthenticationManager" use-expressions="true"
              xmlns="http://www.springframework.org/schema/security">
        <sec:intercept-url pattern="/**" access="hasRole('resource')" />
        <sec:anonymous enabled="false" />
        <sec:custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>
	
    <bean id="checkTokenEndpoint" class="org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpoint">
        <property name="tokenServices" ref="tokenServices" />
    </bean>

    <bean id="clientAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <constructor-arg ref="clientAuthenticationManager" />
        <constructor-arg ref="basicAuthenticationEntryPoint" />
        <property name="authenticationDetailsSource" ref="authenticationDetailsSource" />
    </bean>
    
    <!-- replacing original org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetailsSource for spring imlementation of AuthenticationDetailsSource-->
    <bean id="authenticationDetailsSource" class="org.springframework.security.web.authentication.WebAuthenticationDetailsSource" />
        
    <bean id="basicAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="UAA/client" />
        <property name="typeName" value="Basic" />
    </bean>
        
</beans>