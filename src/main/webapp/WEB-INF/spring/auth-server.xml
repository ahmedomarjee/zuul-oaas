<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

   
    <!--////////// OAuth2 Authorization Server //////////-->
    
    <!--
        Authorization server specifies that the OAuth2 authorization and token endpoints should
        be created in the application context.

        ! Change of endpoint URLs doesn't work in 1.0.0.RC2, we must use default ones !
    -->
    <oauth:authorization-server
        authorization-endpoint-url="${authorization.endpoint}"
        token-endpoint-url="${token.endpoint}"
        client-details-service-ref="clientDetailsService"
        token-services-ref="tokenServices"
        user-approval-handler-ref="lockableApprovalHandler">

        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password disabled="true" />
    </oauth:authorization-server>

    <!--
        A user approval handler that prevents locked clients to be authorized.
        This is important especially for clients with implicit grant which are issued an access token directly
        without requesting token endpoint.
    -->
    <bean id="lockableApprovalHandler" class="cz.cvut.zuul.oaas.handlers.LockableClientUserApprovalHandler"
          p:clientDAO-ref="clientDAO"
          p:parentHandler-ref="memorizingApprovalHandler" />

    <!--
        A user approval handler that remembers approval decisions by consulting existing tokens.
    -->
    <bean id="memorizingApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler"
          p:tokenServices-ref="tokenServices" />


    <!--///// Services /////-->

    <!--
        Base implementation for token services using random UUID values for the access token and refresh token
        values. The main extension point for customizations is the TokenEnhancer which will be called after the
        access and refresh tokens have been generated but before they are stored. Persistence is delegated to
        a TokenStore implementation and customization of the access token to a TokenEnhancer.
    -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices"
          p:supportRefreshToken="true"
          p:accessTokenValiditySeconds="3600"
          p:refreshTokenValiditySeconds="2592000"
          p:tokenStore-ref="tokenStore"
          p:clientDetailsService-ref="clientDetailsService" />

    <bean id="clientDetailsService" class="cz.cvut.zuul.oaas.services.internal.ClientDetailsServiceImpl"
          p:clientDAO-ref="clientDAO" />

    <!-- Replacement for org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService -->
    <bean id="clientUserDetailsService" class="cz.cvut.zuul.oaas.services.internal.LockableClientUserDetailsService"
          p:clientDAO-ref="clientDAO" />

    <bean id="tokenStore" class="cz.cvut.zuul.oaas.services.internal.TokenStoreImpl"
          p:accessTokenDAO-ref="accessTokenDAO"
          p:refreshTokenDAO-ref="refreshTokenDAO" />

</beans>
