<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">


    <!--////////// Aspects Configuration //////////-->

<!--     To enable @AspectJ support 
    <aop:aspectj-autoproxy/>-->
    
    <!-- Aspect -->
    <bean id="loggingAspect" class="cz.cvut.zuul.oaas.api.rest.aspect.LoggingAspect" />
    
    <!-- proxy-target-class forces the use of CGLIB proxies, which allows proxying classes in addition to interfaces, 
    sicne we need to create aspect on controller which doesn't implement any interface-->
    <aop:config proxy-target-class="true">
 
        <aop:aspect id="logAfterUpdateAndDelete" ref="loggingAspect" >
 
            <!-- @AfterReturning -->
            <aop:pointcut id="updateLogging"
                  expression="execution(* cz.cvut.zuul.oaas.api.rest.ClientsController.add*(..))" />
 
            <aop:after-returning method="logUpdate" pointcut-ref="updateLogging" />

            <!-- @AfterReturning -->
            <aop:pointcut id="deleteLogging"
                  expression="execution(* cz.cvut.zuul.oaas.api.rest.ClientsController.delete*(..))" />
 
            <aop:after-returning method="logDelete" pointcut-ref="deleteLogging" />
 
        </aop:aspect>
 
    </aop:config>
    
</beans>
